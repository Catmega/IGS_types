tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Manager/NodeType.yaml
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Worker/NodeType.yaml
  - nodetypes/igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - nodetypes/igs.nodes.abstract/IGSOSInstance/NodeType.tosca


  - nodetypes/igs.nodes.ContainerApplication/igs.nodes.ContainerApplication.CrunchyPostgres/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresDBMSCluster/NodeType.tosca
  - nodetypes/igs.nodes.docker/IGSDockerTempararyVolume/NodeType.tosca
  - nodetypes/igs.nodes.docker/IGSDockerAutoOverlayNetwork/NodeType.tosca
  - policytypes/igs.policies.validate.SwarmManager/PolicyType.tosca
  - policytypes/igs.policies.validate.SwarmWorker/PolicyType.tosca
  - policytypes/igs.policies.validate.DockerEngine/PolicyType.tosca
  # - policytypes/igs.policies.validate.Postgres/PolicyType.tosca
  - policytypes/igs.policies.scaling.scaleIn.PostgresCluster/PolicyType.tosca
  - policytypes/igs.policies.scaling.scaleOut.PostgresCluster/PolicyType.tosca

  - artifacttypes/igs.artifacts/DockerCompose/ArtifactType.tosca
  - artifacttypes/igs.artifacts/Html/ArtifactType.tosca
  - artifacttypes/igs.artifacts/Jar/ArtifactType.tosca
  
topology_template:

  node_templates:
################ Infrastructure ####################
    workstation-1: # for frontend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: localhost
        public_address: 192.168.221.163
        username: ubuntu
        name: localhost
        host_name: ubu22vm03

    workstation-2: # for backend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: 129.69.209.200
        public_address: 129.69.209.200
        username: jingyue
        name: remote_host
        host_name: pcss22task2vm4

    swarm-manager: # for frontend
      type: igs.nodes.Swarm.Manager
      # attributes:
      #   network_name: remote_network
      #   driver: overlay
      properties:
        node_lables: {applicationTile: backend, isNfsClient: "true"}
      requirements:
        - runtimeHost: docker-engine-1
        - host: workstation-1
    swarm-worker-1: # for backend
      type: igs.nodes.Swarm.Worker
      properties:
        node_lables: {applicationTile: frontend, isNfsClient: "false"}
      requirements:
        - manager:
            node: swarm-manager
            relationship: connectToManager_relationship
        - runtimeHost: docker-engine-2
        - host: workstation-2



    docker-engine-1:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-1
    docker-engine-2:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-2

    docker-temp-volume:
      type: igs.nodes.docker.TempararyVolume

    docker-stack-autogenerated-network:   
      type: igs.nodes.docker.AutoOverlayNetwork
      requirements:
        - host: swarm-manager

################ IG Components ####################
    Postgres-DBMS-Cluster:
      type: igs.nodes.postgres.PostgresDBMSCluster
      properties:
        replica_num: 2
        stack_name: igsstack
        docker_compose_file_loc: { get_artifact: [ SELF, docker_compose_file ] }
        labels: node.labels.DatabaseTile==true
      artifacts:
        docker_compose_file:
          type: igs.artifacts.Ansible.DockerCompose
          file: artifacts/clustered-postgres-stack.yaml
      requirements:
        # - host: swarm-manager
        - containerApplication: Crunchy-Postgres-Container
        

 

################ IG Containers ####################
    Crunchy-Postgres-Container:
      type: igs.nodes.ContainerApplication.CrunchyPostgres
      properties:
        image_namespace: crunchydata
        image_name: crunchy-postgres
        image_version: centos7-12.5-4.4.2
      requirements:
        # - host: workstation-1
        - host: swarm-manager
        - network: docker-stack-autogenerated-network
        - storage: docker-temp-volume

  relationship_templates:
    connectToManager_relationship:
      type: igs.relationships.ConnectsToManager
      properties:
        channel:
          port: 2377
          commu_method: httpAPI

  policies:
    - scaleIn-Postgres-DBMS:
        type: igs.policies.scaling.scaleIn.PostgresCluster
        targets: [ Postgres-DBMS-Cluster ]
    - scaleOut-Postgres-DBMS:
        type: igs.policies.scaling.scaleOut.PostgresCluster
        targets: [ Postgres-DBMS-Cluster ]

        