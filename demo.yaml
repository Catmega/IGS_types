tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Manager/NodeType.yaml
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Worker/NodeType.yaml
  - nodetypes/igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSServer/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSVolume/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSClient/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSRepository/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSRepository-reduced/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSFedSearch/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSFTSearch/NodeType.tosca
  - nodetypes/igs.nodes.Solr/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSStorageService/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSObjectService/NodeType.tosca
  - nodetypes/igs.nodes.docker/IGSDockerApplication/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresDatabase/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresDBMS/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresCatalog/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresObjectCatalog/NodeType.tosca
  - nodetypes/igs.nodes.postgres/PostgresRecordsCatalog/NodeType.tosca
  - nodetypes/igs.nodes.Component/ProxyService/NodeType.tosca
  - nodetypes/igs.nodes.Component/ProxyService-reduced/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSRepositoryService/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSRecordsManagement/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSRepositoryAdministration/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSSecurityService/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSTransformServices/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSMessageService/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSContentAppService/NodeType.tosca
  - nodetypes/igs.nodes.abstract/IGSOSInstance/NodeType.tosca


  - nodetypes/igs.nodes.demo/igs.nodes.demo.PortalUI/NodeType.tosca
  - nodetypes/igs.nodes.demo/igs.nodes.demo.Postgres/NodeType.tosca
  - nodetypes/igs.nodes.demo/igs.nodes.demo.Proxy/NodeType.tosca
  - nodetypes/igs.nodes.demo/igs.nodes.demo.Repository/NodeType.tosca
  - policytypes/igs.policies.validate.SwarmManager/PolicyType.tosca
  - policytypes/igs.policies.validate.SwarmWorker/PolicyType.tosca
  - policytypes/igs.policies.validate.DockerEngine/PolicyType.tosca
  - policytypes/igs.policies.validate.Postgres/PolicyType.tosca
topology_template:

  node_templates:

    workstation-1: # for frontend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: localhost
        public_address: 192.168.221.163
        username: ubuntu
        name: localhost
        tier: frontend
        host_name: ubu22vm03

    workstation-2: # for backend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: 129.69.209.200
        public_address: 129.69.209.200
        username: jingyue
        name: remote_host
        tier: backend
        host_name: pcss22task2vm4

    swarm-manager: # for frontend
      type: igs.nodes.Swarm.Manager
      attributes:
        network_name: remote_network
        driver: overlay
      properties:
        node_lables: {tile: frontend, isNfsClient: "true"}
      requirements:
        - runtimeHost: docker-engine-1
        - host: workstation-1
    swarm-worker-1: # for backend
      type: igs.nodes.Swarm.Worker
      properties:
        node_lables: {tile: backend, isNfsClient: "false"}
      requirements:
        - manager:
            node: swarm-manager
            relationship: connectToManager_relationship
        - runtimeHost: docker-engine-2
        - host: workstation-2
    workstation-3: # for nfs
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: 192.168.221.133 #192.168.221.234
        public_address: 192.168.221.133 #192.168.221.234
        username: ubuntu
        name: remote_host
        tier: backend
        host_name: igrepositopry



    docker-engine-1:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-1
    docker-engine-2:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-2
    nfs-server: #/home/ubuntu/mntnfs #/mnt/nfsdir
      type: igs.nodes.NFS.NFSServer
      attributes:
        clients_ips: [192.168.221.163, 129.69.209.200]
      properties:
        server_mnt_path: /home/ubuntu/mntnfs #/var/share 
      requirements:
        - host: workstation-3

    # repository-volume:
    #   type: igs.nodes.NFS.Volume
    #   properties:
    #     name: alfdata-volume
    #   requirements:
    #     - host: workstation-1
    #     - storageClient: nfs-client-1

    # postgres-volume:
    #   type: igs.nodes.NFS.Volume
    #   properties:
    #     name: pgdata-volume
    #   requirements:
    #     - host: workstation-1
    #     - storageClient: nfs-client-1

    # solr-volume:
    #   type: igs.nodes.NFS.Volume
    #   properties:
    #     name: solrdata-volume
    #   requirements:
    #     - host: workstation-1
    #     - storageClient: nfs-client-1

    nfs-client-1:
      type: igs.nodes.NFS.NFSClient
      attributes:
        client_mnt_path: /mount/nfs #/mount/nfsshare
      requirements:
        - storageServer: nfs-server
        - host: workstation-1


##############components part#############################
        
    Repository:
      type: igs.nodes.Component.Repository.reduced
      requirements:
        # - fedSearch: Fed-Search
        # - obejectService: Object-Service
        - catalog: Catalog     
        - objectCatalog: Obeject-Catalog
        - recordsCatalog: Records-Catalog
        # - messageBroker: Message-Service
        # - transform: Transform-Service
        - containerApplication: Demo-Repository-Container
        
    # Object-Service:
    #   type: igs.nodes.Component.ObejectService
    #   requirements:
    #     - FTSearchEngine: Solr
    # Fed-Search:
    #   type: igs.nodes.Component.FedSearch
    #   requirements:
    #     - FTSearch: FT-Search-Service
    # FT-Search-Service:
    #   type: igs.nodes.Component.FTSearchService
    #   requirements:
    #     - FTSearchEngine: Solr

    # Solr:
    #   type: igs.nodes.SolrSearch
    #   requirements:
    #     - containerApplication: Alfresco-Solr-Container
    #     - storageService: Storage-Service

    MockStorage:
      type: tosca.nodes.Storage.ObjectStorage
      properties:
          name: mock-storage
    MockNetwork:
      # properties:
      #     name: remote_network      
      type: tosca.nodes.network.Network

    # Storage-Service:
    #   type: igs.nodes.Component.StorageService
    #   requirements:
    #     - BlockStorage: nfs-client-1
    
    Catalog:
      type: igs.nodes.postgres.PostgresCatalog
      properties:
        name: alfresco-catalog
      requirements:
        - endpoint: Postgres-Database
        - host: Postgres-DBMS
    Obeject-Catalog:
      type: igs.nodes.postgres.PostgresObjectCatalog
      properties:
        name: alfresco-object-catalog
      requirements:
        - endpoint: Postgres-Database
        - host: Postgres-DBMS
    Records-Catalog:
      type: igs.nodes.postgres.PostgresRecordsCatalog
      properties:
        name: alfresco-records-catalog
      requirements:
        - endpoint: Postgres-Database
        - host: Postgres-DBMS
    Postgres-Database:
      type: igs.nodes.postgres.PostgresDatabase
      properties:
        username: igs
        password: igs
        db_name: igsdatabase
        name: postgres-database
      requirements:
        - host: Postgres-DBMS
    Postgres-DBMS:
      type: igs.nodes.postgres.PostgresDBMS
      properties:
          name: Postgres-DBMS
          port: 5432
      requirements:
        - host: Demo-Postgres-Container

    Proxy-Service:
      type: igs.nodes.Component.ProxyService.reduced
      requirements:
        - containerApplication: Demo-Nginx-Container
        - repositoryService: Repository-Portal-Service
        # - recordsManagement: Records-Management
        # - repositoryAdministration: Repository-Administration
        # - contentAppService: ContentApp-Service
    
    Repository-Portal-Service:
      type: igs.nodes.Component.RepositoryService
      requirements:
        - repository: Repository
        - containerApplication: Demo-Portal-Container
    


############containers###################################
    Demo-Repository-Container:
      type: igs.nodes.demo.container.Repository
      properties:
          group: frontend
          labels: [node.labels.tile==frontend, node.labels.isNfsClient==true]
          container_data_dir: /no_data_yet
      requirements:
        - host: workstation-1
        - runtime: docker-engine-1
        - network: MockNetwork
        - storage: MockStorage

    Demo-Nginx-Container:
      type: igs.nodes.demo.container.Proxy
      properties:
          group: frontend
          labels: [node.labels.tile==frontend]
      requirements:
        - host: workstation-1
        - runtime: docker-engine-1
        - network: MockNetwork
        - storage: MockStorage
        # - dependency_1: Alfresco-Share-Container


    Demo-Postgres-Container:
      type: igs.nodes.demo.container.Postgres
      properties:
          group: frontend
          labels: [node.labels.isNfsClient==true]
          container_data_dir:  /var/lib/postgresql/data
      requirements:
        - host: workstation-1
        - runtime: docker-engine-1
        - network: MockNetwork
        - storage: MockStorage

    Demo-Portal-Container:
      type: igs.nodes.demo.container.Portal
      properties:
          group: frontend
          labels: [node.labels.tile==frontend]
      requirements:
        - host: workstation-1
        - runtime: docker-engine-1
        - network: MockNetwork
        - storage: MockStorage



  relationship_templates:
    connectToManager_relationship:
      type: igs.relationships.ConnectsToManager
      properties:
        channel:
          port: 2377
          commu_method: httpAPI

  policies:
    - validate-SwarmManager:
        type: igs.policies.validate.SwarmManager
        targets: [ swarm-manager ]
    - validate-DockerEngine-1:
        type: igs.policies.validate.DockerEngine
        targets: [docker-engine-1] # [docker-engine-1,docker-engine-2] not working
    - validate-DockerEngine-2:
        type: igs.policies.validate.DockerEngine
        targets: [docker-engine-2]
    - validate-SwarmWorker:
        type: igs.policies.validate.SwarmWorker
        targets: [swarm-worker-1 ]
    - validate-Postgres:
        type: igs.policies.validate.Postgres
        targets: [Demo-Postgres-Container]
        