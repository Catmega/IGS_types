tosca_definitions_version: tosca_simple_yaml_1_3
imports:
  - ../../igs.nodes.abstract/IGSBlockStorage/NodeType.tosca
  - ../NFSServer/NodeType.tosca
  - ../../igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - ../../../relationshiptypes/igs.relationshipsn.NFS/ConnectsToNFSServer/RelationshipType.tosca
  - ../../../interfacetypes/igs.interfaces.node.lifecycle/Validation/InterfaceType.tosca
node_types:
  igs.nodes.NFS.NFSClient:
    derived_from: igs.nodes.abstract.BlockStorage
    metadata:
      targetNamespace: "igs.nodes.docker"
      abstract: "false"
      final: "false"

    attributes:
      server_ip: #for passing to nfs volume
        type: string
     
        default: { get_attribute: [SELF, storageServer, server_ip ] }
      # server_mnt_path: #for passing to nfs volumes
      #   type: string
     
      #   default: { get_property: [SELF, storageServer, server_mnt_path ] }  
      client_mnt_path:
        type: string
      client_ip:
        type: string
        default: { get_attribute: [SELF, host, public_address ] }

    requirements:
      - storageServer:
          capability: tosca.capabilities.Attachment
          node: igs.nodes.NFS.NFSServer
          relationship: igs.relationships.NFS.ConnectsToNFSServer
          occurrences: [ 1, 1 ]  

      - host:
          capability: tosca.capabilities.Compute
          # node: igs.nodes.abstract.CloudPlatform
          node: igs.nodes.abstract.OSInstance
          relationship: tosca.relationships.HostedOn
          occurrences: [ 1, 1 ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          configure:
            inputs:

              ANSIBLE_HOST_IP:
                type: string
                required: true
                default: { get_attribute: [SELF, host, private_address ] }
              ANSIBLE_USER:
                type: string
                required: true
                default: { get_attribute: [SELF, host, username ] }
              ANSIBLE_HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [SELF, host, name ] } 
              SERVER_IP:
                type: string
                required: true
                default: { get_attribute: [SELF, server_ip ] }     
              SERVER_MNT_PATH:
                type: string
                required: true
                default: { get_property: [SELF, storageServer, server_mnt_path ] }     
              CLIENT_MNT_PATH:
                type: string
                required: true
                default: { get_attribute: [SELF, client_mnt_path ] }               
            implementation:
              primary: files/configure/configure.yaml #create
      Validation:
        type: igs.interfaces.node.lifecycle.Validation 
        operations:
          validate: 
            inputs:

              log_file_loc:
                type: string
                required: true
                default: /home/ubuntu/opera-root/git-project/IGS_types/validation.log
            implementation:
              primary: files/validate/validate.yaml             

          # delete:
          #   inputs:

          #     ANSIBLE_HOST_IP:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, private_address ] }
          #     ANSIBLE_USER:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, username ] }
          #     ANSIBLE_HOST_NAME:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, name ] } 

          #   implementation:
          #     primary: files/delete/delete.yaml #delete
          
    artifacts:
      create:
        type: igs.artifacts.Ansible
        file: files/create/create.yaml
      delete:
        type: igs.artifacts.Ansible
        file: files/delete/delete.yaml