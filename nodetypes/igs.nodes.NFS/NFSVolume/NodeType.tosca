tosca_definitions_version: tosca_simple_yaml_1_3
imports:
  - ../NFSServer/NodeType.tosca
  - ../../igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - ../../igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - ../../../capabilitytypes/igs.capabilities.container/DockerRuntime/CapabilityType.tosca
  - ../../igs.nodes.abstract/IGSVolume/NodeType.tosca
node_types:
  igs.nodes.NFS.Volume:
    derived_from: igs.nodes.abstract.Volume
    metadata:
      targetNamespace: "igs.nodes.NFS"
      abstract: "false"
      final: "false"



    properties:
      # name: inherits from igs.nodes.abstract.Volume <- tosca.nodes.abstract.Storage
      client_mnt_path:
        type: string
        required: true
        default: { get_attribute: [SELF, storageClient, client_mnt_path ] } 
    requirements:
      - storageClient:
          capability: tosca.capabilities.Attachment
          node: igs.nodes.NFS.NFSClient
          relationship: tosca.relationships.HostedOn
          occurrences: [ 1, 1 ]    
      - host: # should keep this or not???
          capability: tosca.capabilities.Compute
          # node: igs.nodes.abstract.CloudPlatform
          node: igs.nodes.abstract.OSInstance
          relationship: tosca.relationships.HostedOn
          occurrences: [ 1, 1 ] 
      # - dockerEngine:
      #     capability: igs.capabilities.container.DockerRuntime
      #     node: igs.nodes.docker.DockerEngine
      #     relationship: tosca.relationships.HostedOn
      #     occurrences: [ 1, 1 ]

    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:

              ANSIBLE_HOST_IP:
                type: string
                required: true
                default: { get_attribute: [SELF, host, private_address ] }
              ANSIBLE_USER:
                type: string
                required: true
                default: { get_attribute: [SELF, host, username ] }
              ANSIBLE_HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [SELF, host, name ] } 

              VOLUME_DIR:
                type: string
                required: true
                default: { get_property: [SELF, name ] } 
     
              CLIENT_MNT_PATH:
                type: string
                required: true
                default: { get_property: [SELF, client_mnt_path ] }                  
            implementation:
              primary: files/create/create.yaml #create
            

          # delete:
          #   inputs:

          #     ANSIBLE_HOST_IP:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, private_address ] }
          #     ANSIBLE_USER:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, username ] }
          #     ANSIBLE_HOST_NAME:
          #       type: string
          #       required: true
          #       default: { get_attribute: [SELF, host, name ] } 

          #   implementation:
          #     primary: files/delete/delete.yaml #delete
          
    artifacts:
      create:
        type: igs.artifacts.Ansible
        file: files/create/create.yaml
      delete:
        type: igs.artifacts.Ansible
        file: files/delete/delete.yaml
