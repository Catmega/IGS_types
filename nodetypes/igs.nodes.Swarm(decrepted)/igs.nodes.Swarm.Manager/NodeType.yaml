tosca_definitions_version: tosca_simple_yaml_1_3
imports:
  - ../../igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - ../../../capabilitytypes/igs.capabilities.container/DockerRuntime/CapabilityType.tosca
  - ../../igs.nodes.docker/IGSDockerEngine/NodeType.tosca
node_types:
  igs.nodes.Swarm.Manager:
    derived_from: tosca.nodes.Compute
    attributes:
    ###########OSInstance related##########
      private_address: #inherited attr
        type: string
        default: { get_attribute: [SELF, host, ansible_host_ip ] } 
      public_address: #inherited attr
        type: string
        default: { get_attribute: [SELF, host, public_address ] } 
      username:
        type: string
        default: { get_attribute: [SELF, host, ansible_user ] } 
      # tier:
      #   type: string
      #   default: { get_attribute: [SELF, host, tier ] } 
      name:
        type: string
        default: { get_attribute: [SELF, host, ansible_host_name ] } 
      host_name:
        type: string
        default: { get_attribute: [SELF, host, host_name ] } 
    #######################################
      driver:
        type: string
        default: overlay
      network_name:
        type: string
        default: remote_network
      join_token:
        type: string
        default: haha
        description: the key for a node to joing an existing swarm cluster
    properties:
      node_lables:
        type: string
        # entry_schema:
        #   type: string 
    requirements:
      - host:
          capability: igs.capabilities.container.DockerRuntime
          node: igs.nodes.docker.DockerEngine
          relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create: 
            inputs:
              ANSIBLE_HOST_IP:
                type: string
                required: true
                default: { get_attribute: [SELF, private_address ] }
              ANSIBLE_USER:
                type: string
                required: true
                default: { get_attribute: [SELF, username ] }
              ANSIBLE_HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [SELF, name ] } 

              NETWORK_NAME:
                type: integer
                required: true
                default: { get_attribute: [ SELF, network_name ] }
              NETWORK_DRIVER:
                type: integer
                required: true
                default: { get_attribute: [ SELF, driver ] }
              HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [ SELF, host_name ] }      
              NODE_LABELS:
                type: string
                required: false
                default: { get_property: [ SELF, node_lables ] }   
            implementation:
              primary: files/create/create.yaml 




