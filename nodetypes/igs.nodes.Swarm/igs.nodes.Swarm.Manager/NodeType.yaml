tosca_definitions_version: tosca_simple_yaml_1_3
imports:
  - ../../igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - ../../../capabilitytypes/igs.capabilities.container/DockerRuntime/CapabilityType.tosca
  - ../../igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - ../../igs.nodes.abstract/IGSClusterNode/IGSClusterManager/NodeType.tosca
  - ../../../interfacetypes/igs.interfaces.node.lifecycle/Validation/InterfaceType.tosca


node_types:
  igs.nodes.Swarm.Manager:
    metadata:
      targetNamespace: "igs.nodes.Swarm"
      abstract: "false"
      final: "false"
    derived_from: igs.nodes.abstract.ClusterManager
    # # ########## OSInstance related, inherits from ClusterWorker<-ClusterNode 
    # attributes:
      # host_name:
      #   type: string
      #   default: { get_attribute: [SELF, host, host_name ] } 
      #   public_address: #inherited attr
      #     type: string
      #     default: { get_attribute: [SELF, host, public_address ] } 
      # join_token:
      #   type: string
      #   default: haha
      #   description: the key for a node to joing an existing swarm cluster
      # private_address: #inherited attr
      #   type: string
      #   default: { get_attribute: [SELF, runtimeHost, ansible_runtimeHost_ip ] }
      # public_address: #inherited attr
      #   type: string
      #   description: each ClusterNode is based on a machine with an unique IP address, which is useful. e.g. ClusterWorker need to use this to recognize and join a ClusterManager
      #   default: { get_attribute: [SELF, host, public_address ] }  
    ########## got removed######################################################
    # #   username:
    # #     type: string
    # #     default: { get_attribute: [SELF, runtimeHost, ansible_user ] } 
    # #   name:
    # #     type: string
    # #     default: { get_attribute: [SELF, runtimeHost, ansible_runtimeHost_name ] } 
    # # ###################################################################################
      # tier: # can be replaced with "labels" in Swarm
      #   type: string
      #   default: { get_attribute: [SELF, runtimeHost, tier ] } 


    ########### inherits from ClusterManager/ClusterNode ##########
    # properties:
    #   node_lables:
    #     type: string
    ####################################################################################

    requirements:
      ### override ClusterManager/ClusterNode's requirement-runtimeHost ####
      - runtimeHost:  
          capability: igs.capabilities.container.DockerRuntime
          node: igs.nodes.docker.DockerEngine
          relationship: tosca.relationships.HostedOn
      ######################################################################

    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create: 
            inputs:
              # ANSIBLE_HOST_IP:
              #   type: string
              #   required: true
              #   default: { get_attribute: [SELF, private_address ] }
              # ANSIBLE_USER:
              #   type: string
              #   required: true
              #   default: { get_attribute: [SELF, username ] }
              # ANSIBLE_HOST_NAME:
              #   type: string
              #   required: true
              #   default: { get_attribute: [SELF, name ] } 

              # NETWORK_NAME:
              #   type: integer
              #   required: true
              #   default: { get_attribute: [ SELF, network_name ] }
              # NETWORK_DRIVER:
              #   type: integer
              #   required: true
              #   default: { get_attribute: [ SELF, driver ] }
              HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [ SELF, host_name ] }      
              NODE_LABELS:
                type: string
                required: false
                default: { get_property: [ SELF, node_lables ] }   
            implementation:
              primary: files/create/create.yaml 
      Validation:
        type: igs.interfaces.node.lifecycle.Validation 
        operations:
          validate: files/validate/validate.yaml 




