tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Manager/NodeType.yaml
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Worker/NodeType.yaml
  - nodetypes/igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSServer/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSVolume/NodeType.tosca
  - nodetypes/igs.nodes.NFS/NFSClient/NodeType.tosca
  - nodetypes/igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - nodetypes/igs.nodes.Solr.DocutmentSchema/NodeType.tosca
  - nodetypes/igs.nodes.Solr.Custom/NodeType.tosca
  - nodetypes/igs.nodes.ContainerApplication/igs.nodes.ContainerApplication.Solr/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSFTSearch/NodeType.tosca
  - nodetypes/igs.nodes.Component/IGSStorageService/NodeType.tosca
  - nodetypes/igs.nodes.Python.slim/NodeType.tosca
  - artifacttypes/igs.artifacts/Ansible/ArtifactType.tosca
  - artifacttypes/igs.artifacts/DockerCompose/ArtifactType.tosca
  - policytypes/igs.policies.validate.Solr/PolicyType.tosca
  - nodetypes/igs.nodes.Gunicorn/NodeType.tosca
  - nodetypes/igs.nodes.ContainerApplication.CustomizableWebApp/igs.nodes.ContainerApplication.CustomizableWebApp.GunicornApp/NodeType.tosca
  - nodetypes/igs.nodes.docker/IGSDockerTempararyVolume/NodeType.tosca
  - nodetypes/igs.nodes.docker/IGSDockerAutoOverlayNetwork/NodeType.tosca
  - nodetypes/igs.nodes.abstract/IGSContainerBaseOS/NodeType.tosca
  - artifacttypes/igs.artifacts/txt/ArtifactType.tosca
  - artifacttypes/igs.artifacts/Python/ArtifactType.tosca
topology_template:

  node_templates:

    workstation-1: # for frontend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: localhost
        public_address: 192.168.221.163
        username: ubuntu
        name: localhost
        # tier: frontend
        host_name: ubu22vm03

    workstation-2: # for backend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: 129.69.209.200
        public_address: 129.69.209.200
        username: jingyue
        name: remote_host
        # tier: backend
        host_name: pcss22task2vm4

    swarm-manager: # for frontend
      type: igs.nodes.Swarm.Manager
      # attributes:
      #   network_name: remote_network
      #   driver: overlay
      properties:
        node_lables: {tile: frontend, isNfsClient: "true"}
      requirements:
        - runtimeHost: docker-engine-1
        - host: workstation-1
    swarm-worker-1: # for backend
      type: igs.nodes.Swarm.Worker
      properties:
        node_lables: {tile: backend, isNfsClient: "false"}
      requirements:
        - manager:
            node: swarm-manager
            relationship: connectToManager_relationship
        - runtimeHost: docker-engine-2
        - host: workstation-2

    docker-engine-1:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-1
    docker-engine-2:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-2
  

##############components part#############################
        
    docker-temp-volume:
      type: igs.nodes.docker.TempararyVolume

    docker-stack-autogenerated-network:   
      type: igs.nodes.docker.AutoOverlayNetwork
      requirements:
        - host: swarm-manager

    # MockContainer: 
    #   type: igs.nodes.abstract.ContainerApplication
    #   properties:
    #     client_mnt_path: undefined 
    #     volume_dir: undefined
    #     networkName: undefined
    #   requirements:
    #     - host: swarm-manager
    #     - network: docker-stack-autogenerated-network
    #     - storage: docker-temp-volume

    Mock-Storage-Service:
      type: igs.nodes.abstract.Component
      # requirements:
      #   - containerApplication: MockContainer

############containers###################################

    FT-Search-Service:
      type: igs.nodes.Component.FTSearchService
      properties:
        stack_name: solrstack
        docker_compose_file_loc: { get_artifact: [ SELF, docker_compose_file ] }
        labels: node.labels.applicationTile==backend
      artifacts:
        docker_compose_file:
          type: igs.artifacts.Ansible.DockerCompose
          file: artifacts/ft-searh-stack.yaml
      requirements:
        - FTSearchEngine: Solr-Search-Engine
        - containerApplication: FTSearch-Container


    Solr-Search-Engine:
      type: igs.nodes.Solr.Custom
      properties:
        stack_name: solrstack
        docker_compose_file_loc: { get_artifact: [ SELF, docker_compose_file ] }
        labels: node.labels.applicationTile==backend
        document_schema_file_loc: { get_property: [SELF, docSchema, absolute_loc_schema_file ] }
        core_name: IGS
        port: 8085
      artifacts:
        docker_compose_file:
          type: igs.artifacts.Ansible.DockerCompose
          file: artifacts/solr-stack.yaml
      requirements:
        - containerApplication: Solr-Container
        - storageService: Mock-Storage-Service
        - docSchema: Solr-Schema

    Mock-OS-Base-for-FTSearch:
      type: igs.nodes.abstract.ContainerBaseOS
      properties:
        os_version: mock
        os_name: mock
    Python-Runtime-for-FTSearch:
      type: igs.nodes.Python.slim
      properties:
        runtime_version: 3.8-slim
        image_namespace: docker.io
      requirements:
        - host: Mock-OS-Base-for-FTSearch
    Gunicorn-AppServer-for-FTSearch:
      type: igs.nodes.Gunicorn
      properties:
        webapp_server_version: 20.1.0
        image_namespace: igsrepo
      requirements:
        - host: Python-Runtime-for-FTSearch

    FTSearch-Container:
      type: igs.nodes.ContainerApplication.CustomizableWebApp.GunicornApp
      properties:
        image_namespace: igsrepo
        image_name: search-service
        image_version: 3
        app_file_loc: { get_artifact: [ SELF, ftsearch_app_file ] }
        requirements_file_loc: { get_artifact: [ SELF, requirements_file ] }
      artifacts:
        ftsearch_app_file:
          type: igs.artifacts.Python
          file: artifacts/search_service_app.py
        requirements_file:
          type: igs.artifacts.txt
          file: artifacts/requirements.txt
      requirements:
        - host: swarm-manager
        # - runtime: docker-engine-1
        - network: docker-stack-autogenerated-network
        - storage: docker-temp-volume
        - webAppServer: Gunicorn-AppServer-for-FTSearch

    Solr-Container:
      type: igs.nodes.ContainerApplication.Solr
      properties:
        image_name: solr
        image_namespace: docker.io
        image_version: latest

        # solr_version: latest
        # host_port: 8086
        # core_name: IGS
        # group: backend
        # labels: [node.labels.tile==backend]
      requirements:
        - host: swarm-manager
        - network: docker-stack-autogenerated-network
        - storage: docker-temp-volume
        # - docSchema: Solr-Schema

    Solr-Schema:
      type: igs.nodes.Solr.DocumentSchema
      properties:
        absolute_loc_schema_file: /home/ubuntu/opera-root/git-project/IGS_types/artifacts/doc_schema.json

  relationship_templates:
    connectToManager_relationship:
      type: igs.relationships.ConnectsToManager
      properties:
        channel:
          port: 2377
          commu_method: httpAPI

  policies:
    - validate-SolrEnginee:
        type: igs.policies.validate.Solr
        targets: [ Solr-Search-Engine ]        

# curl --request POST \
#   --url 'http://localhost:8085/solr/IGS/update' \
#   --header 'Content-Type: application/json' \
#   --data '  [{
#     "id" : "001-232401",
#     "title" : "Information Governance System running on a Cloud",
#     "author" : "Nancy",
#     "description" : "This paper talks about how a Information Governance System runs on a Cloud"
#   }]'

# http://129.69.209.200:8080/search?author=Nancy