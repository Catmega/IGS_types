tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Manager/NodeType.yaml
  - nodetypes/igs.nodes.Swarm/igs.nodes.Swarm.Worker/NodeType.yaml
  - nodetypes/igs.nodes.docker/IGSDockerEngine/NodeType.tosca
  - nodetypes/igs.nodes.abstract/IGSOSInstance/NodeType.tosca
  - relationshiptypes/igs.relationships/ConnectsToManager/RelationshipType.tosca
topology_template:

  inputs:
    host_1_ip:
      type: string
    host_1_username:
      type: string
    host_1_hostname:
      type: string
    host_2_ip:
      type: string
    host_2_username:
      type: string
    host_2_hostname:
      type: string

  node_templates:
    workstation-1: # for frontend
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: localhost # This workstation is the local controller
        public_address: { get_input: host_1_ip }  # 192.168.221.163
        host_name: { get_input: host_1_hostname } # ubu22vm03
        username: { get_input: host_1_username } # ubuntu
        name: localhost # should get decrepted later
        tier: frontend # should get decrepted later
        
    workstation-2: # for nfs
      type: igs.nodes.abstract.OSInstance
      attributes:
        private_address: { get_input: host_2_ip } # 192.168.221.133 
        public_address: { get_input: host_2_ip } # 192.168.221.133 
        host_name: { get_input: host_2_hostname } # igrepositopry
        username: { get_input: host_2_username } # ubuntu
        name: remote_host # should get decrepted later
        tier: backend # should get decrepted later
        

    swarm-manager: # for frontend
      type: igs.nodes.Swarm.Manager
      properties:
        node_lables: {tile: frontend, isNfsClient: "true"}
      requirements:
        - runtimeHost: docker-engine-1
        - host: workstation-1

    swarm-worker-1: # for backend
      type: igs.nodes.Swarm.Worker
      properties:
        node_lables: {test: test}
      requirements:
        - manager:
            node: swarm-manager
            relationship: connectToManager_relationship
        - runtimeHost: docker-engine-2
        - host: workstation-2




    docker-engine-2:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-2



    docker-engine-1:
      type: igs.nodes.docker.DockerEngine
      requirements:
        - host: workstation-1



  relationship_templates:
    connectToManager_relationship:
      type: igs.relationships.ConnectsToManager
      properties:
        channel:
          port: 2377
          commu_method: httpAPI



    
